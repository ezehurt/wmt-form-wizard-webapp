// Need to use the React-specific entry point to import `createApi`
import { createApi, fetchBaseQuery } from "@reduxjs/toolkit/query/react"
import { VITE_BACKEND_API } from "../../viteEnvImports"
import { TFlow, TManager } from "../../types/workflow/types"

// Define a service using a base URL and expected endpoints
export const flowsTemplateApiSlice = createApi({
  baseQuery: fetchBaseQuery({ baseUrl: `${VITE_BACKEND_API}` }),
  reducerPath: "flowTemplateApi",
  // Tag types are used for caching and invalidation.
  tagTypes: ["FlowTemplate"],
  endpoints: build => ({
    getFlowTemplates: build.query<TManager, void>({
      query: () => "flows",
      providesTags: ["FlowTemplate"],
    }),
    getFlowTemplateById: build.query<TFlow, string>({
      query: id => `/flows/w${id}`,
      providesTags: (result, error, id) => [{ type: "FlowTemplate", id }],
    }),
  }),
})

// Hooks are auto-generated by RTK-Query
// Same as `quotesApiSlice.endpoints.getQuotes.useQuery`
export const { useGetFlowTemplatesQuery, useGetFlowTemplateByIdQuery } =
  flowsTemplateApiSlice
